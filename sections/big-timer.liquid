{% if section.settings.show_timer %}
  <!-- Big Timer Section -->
  <div class='bg-gray-800 py-16 px-4'>
    <div class='max-w-4xl mx-auto text-center'>
      <!-- Main Title -->
      <h2 class='text-4xl md:text-5xl font-bold text-white mb-8  tracking-wide'>
        {{ section.settings.main_title | default: "Ovis Hunter Drop:" }}
      </h2>

      <!-- Countdown Timer -->
      <div
        class='flex justify-center items-center gap-2 sm:gap-4 mb-8'
        x-data='countdownTimer()'
      >
        <!-- Days -->
        <div class='bg-gray-700 rounded-lg p-2 sm:p-4 min-w-[60px] sm:min-w-[80px]'>
          <div
            class='text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-1'
            x-text='days'
          ></div>
          <div class='text-xs text-white uppercase tracking-wide'>days</div>
        </div>

        <!-- Hours -->
        <div class='bg-gray-700 rounded-lg p-2 sm:p-4 min-w-[60px] sm:min-w-[80px]'>
          <div
            class='text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-1'
            x-text='hours'
          ></div>
          <div class='text-xs text-white uppercase tracking-wide'>hours</div>
        </div>

        <!-- Minutes -->
        <div class='bg-gray-700 rounded-lg p-2 sm:p-4 min-w-[60px] sm:min-w-[80px]'>
          <div
            class='text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-1'
            x-text='minutes'
          ></div>
          <div class='text-xs text-white uppercase tracking-wide'>minutes</div>
        </div>

        <!-- Seconds -->
        <div class='bg-gray-700 rounded-lg p-2 sm:p-4 min-w-[60px] sm:min-w-[80px]'>
          <div
            class='text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-1'
            x-text='seconds'
          ></div>
          <div class='text-xs text-white uppercase tracking-wide'>seconds</div>
        </div>
      </div>

      <!-- Slogan -->
      <p class='text-lg text-white mb-8'>
        {{
          section.settings.slogan
          | default: "Working Knives For Working People."
        }}
      </p>

      <!-- Notify Me Button -->
      <div
        x-data='bladeDropForm()'
        class='relative'
      >
        <button
          @click='openForm'
          class='{{ section.settings.button_color | default: 'bg-black' }} hover:{{ section.settings.button_color | default: 'bg-gray-900' }} text-white font-bold py-4 px-8 uppercase tracking-wide transition-colors duration-200 cursor-pointer'
        >
          {{ section.settings.button_text | default: "NOTIFY ME" }}
        </button>

        <!-- Email Signup Form Popup -->
        <div
          x-show='showForm'
          x-transition:enter='transition ease-out duration-300'
          x-transition:enter-start='opacity-0 scale-95'
          x-transition:enter-end='opacity-100 scale-100'
          x-transition:leave='transition ease-in duration-200'
          x-transition:leave-start='opacity-100 scale-100'
          x-transition:leave-end='opacity-0 scale-95'
          class='absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full z-10 bg-white rounded-lg p-6 max-w-md mx-4 shadow-lg border'
          @click.away='closeForm'
          style='display: none;'
        >
          <button
            @click='closeForm'
            class='absolute top-2 right-2 text-gray-400 hover:text-gray-600'
          >
            <svg
              class='w-5 h-5'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>

          <form @submit.prevent='submit' novalidate>
            <div class='text-center mb-4'>
              <h3 class='text-lg font-semibold text-black mb-2'>
                {{ section.settings.form_title | default: "Get Notified" }}
              </h3>
              <p class='text-sm text-gray-600'>
                {{
                  section.settings.form_subtitle
                  | default: "Enter your email to be notified when we launch"
                }}
              </p>
            </div>

            <div class='space-y-4'>
              <input
                type='text'
                x-model='name'
                name='contact[name]'
                placeholder='Full Name'
                class='w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-orange-500'
                required
              >
              <input
                type='email'
                x-model='email'
                name='contact[email]'
                placeholder='Email Address'
                class='w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-orange-500'
                required
              >
              <input
                type='hidden'
                name='contact[tags]'
                value='blade-drop-notification'
              >
              <button
                type='submit'
                :disabled='submitting'
                class='w-full {{ section.settings.button_color | default: 'bg-black' }} hover:{{ section.settings.button_color | default: 'bg-gray-900' }} text-white font-semibold py-3 px-4 rounded-lg transition-colors duration-200 cursor-pointer'
              >
                <span
                  x-text="submitting ? 'Submitting...' : 'Notify Me'"
                ></span>
              </button>
            </div>

            <div
              x-show='errorMessage'
              class='mt-4 text-sm text-red-600'
              x-text='errorMessage'
            ></div>
          </form>
        </div>

        <!-- Success Notification -->
        <div
          x-show='showSuccess'
          x-transition:enter='transition ease-out duration-300'
          x-transition:enter-start='opacity-0 scale-95'
          x-transition:enter-end='opacity-100 scale-100'
          x-transition:leave='transition ease-in duration-200'
          x-transition:leave-start='opacity-100 scale-100'
          x-transition:leave-end='opacity-0 scale-95'
          class='absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full z-10 bg-white rounded-lg p-6 max-w-md mx-4 shadow-lg border'
          style='display: none;'
        >
          <button
            @click='closeSuccess'
            class='absolute top-2 right-2 text-gray-400 hover:text-gray-600'
          >
            <svg
              class='w-5 h-5'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
          <div class='text-center'>
            <h3 class='text-sm font-semibold text-black mb-1 uppercase'>
              {{
                section.settings.success_title
                | default: "You're on the list!"
              }}
            </h3>
            <h2 class='text-lg font-bold text-black mb-4 uppercase'>
              {{
                section.settings.success_subtitle
                | default: "We'll notify you when we launch"
              }}
            </h2>
            <div class='{{ section.settings.success_button_color | default: 'bg-orange-500' }} text-white py-3 px-4 rounded-lg'>
              <p class='font-semibold text-sm'>
                {{
                  section.settings.success_message
                  | default: "Thanks for signing up!"
                }}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

<!-- Countdown Timer Script -->
<script>
  function countdownTimer() {
    return {
      days: '00',
      hours: '00',
      minutes: '00',
      seconds: '00',
      timerInterval: null,

      init() {
        this.updateCountdown()
        // Only start interval if we have a valid target date
        if (this.isValidTargetDate()) {
          this.timerInterval = setInterval(() => this.updateCountdown(), 1000)
        }
      },

      isValidTargetDate() {
        var targetDateString =
          '{{ section.settings.target_date | default: "2024-12-31T23:59:59" }}'
        var cleanDateString = targetDateString.trim()

        if (!cleanDateString.includes('T')) {
          cleanDateString += 'T23:59:59'
        }

        if (
          !cleanDateString.includes('Z') &&
          !cleanDateString.includes('+') &&
          !cleanDateString.includes('-', 10)
        ) {
          cleanDateString += 'Z'
        }

        var targetDate = new Date(cleanDateString).getTime()
        return !isNaN(targetDate) && targetDate > 0
      },

      updateCountdown() {
        var targetDateString =
          '{{ section.settings.target_date | default: "2024-12-31T23:59:59" }}'
        console.log('Target date string:', targetDateString)

        // Clean and validate the date string
        var cleanDateString = targetDateString.trim()

        // Ensure proper ISO format
        if (!cleanDateString.includes('T')) {
          cleanDateString += 'T23:59:59'
        }

        // Add timezone if not present
        if (
          !cleanDateString.includes('Z') &&
          !cleanDateString.includes('+') &&
          !cleanDateString.includes('-', 10)
        ) {
          cleanDateString += 'Z'
        }

        var targetDate = new Date(cleanDateString).getTime()

        // If date is invalid, use a fallback date
        if (isNaN(targetDate) || targetDate <= 0) {
          console.warn('Invalid target date, using fallback')
          targetDate = new Date('2025-12-31T23:59:59Z').getTime()
        }

        var now = new Date().getTime()
        var distance = targetDate - now

        if (distance < 0) {
          this.days = '00'
          this.hours = '00'
          this.minutes = '00'
          this.seconds = '00'
          console.log('Countdown reached zero - timer stopped')
          // Clear the interval to stop the infinite loop
          if (this.timerInterval) {
            clearInterval(this.timerInterval)
            this.timerInterval = null
          }
          return
        }

        this.days = Math.floor(distance / (1000 * 60 * 60 * 24))
          .toString()
          .padStart(2, '0')
        this.hours = Math.floor(
          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        )
          .toString()
          .padStart(2, '0')
        this.minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
          .toString()
          .padStart(2, '0')
        this.seconds = Math.floor((distance % (1000 * 60)) / 1000)
          .toString()
          .padStart(2, '0')
      },
    }
  }

  function bladeDropForm() {
    return {
      showForm: false,
      showSuccess: false,
      name: '',
      email: '',
      submitting: false,
      errorMessage: '',

      openForm() {
        this.showForm = true
        this.errorMessage = ''
        this.name = ''
        this.email = ''
      },

      closeForm() {
        this.showForm = false
      },

      closeSuccess() {
        this.showSuccess = false
      },

      async submit(event) {
        this.errorMessage = ''
        this.submitting = true

        var form = event.target

        // Validate name field
        if (!this.name || !this.name.trim()) {
          this.errorMessage = 'Please enter your full name.'
          this.submitting = false
          return
        }

        // Validate email field
        if (!this.email || !this.email.trim()) {
          this.errorMessage = 'Please enter your email address.'
          this.submitting = false
          return
        }

        // Additional email format validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(this.email)) {
          this.errorMessage = 'Please enter a valid email address.'
          this.submitting = false
          return
        }

        var formData = new FormData(form)

        try {
          var response = await fetch('/contact', {
            method: 'POST',
            body: formData,
            headers: {
              Accept: 'text/html,application/xhtml+xml',
            },
            credentials: 'same-origin',
          })

          if (response.ok) {
            // Optionally inspect response.text() or response.url for query params
            this.showForm = false
            this.showSuccess = true
            this.name = ''
            this.email = ''
          } else {
            // For error statuses, attempt to parse the response to get message
            var text = await response.text()
            this.errorMessage = 'Submission failed. Please try again.'
            console.warn('Form submission response text:', text)
          }
        } catch (err) {
          console.error('Error submitting form:', err)
          this.errorMessage = 'An error occurred. Please try again later.'
        } finally {
          this.submitting = false
        }
      },
    }
  }
</script>

{% schema %}
{
  "name": "Big Timer",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_timer",
      "label": "Show Timer Section",
      "default": true
    },
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "text",
      "id": "main_title",
      "label": "Main Title",
      "default": "Ovis Hunter Drop:"
    },
    {
      "type": "text",
      "id": "slogan",
      "label": "Slogan",
      "default": "Working Knives For Working People."
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "NOTIFY ME"
    },
    {
      "type": "header",
      "content": "Timer Settings"
    },
    {
      "type": "text",
      "id": "target_date",
      "label": "Target Date & Time",
      "default": "2024-12-31T23:59:59",
      "info": "Format: YYYY-MM-DDTHH:MM:SS (e.g., 2024-12-31T23:59:59)"
    },
    {
      "type": "header",
      "content": "Form Settings"
    },
    {
      "type": "text",
      "id": "form_title",
      "label": "Form Title",
      "default": "Get Notified"
    },
    {
      "type": "text",
      "id": "form_subtitle",
      "label": "Form Subtitle",
      "default": "Enter your email to be notified when we launch"
    },
    {
      "type": "header",
      "content": "Success Notification"
    },
    {
      "type": "text",
      "id": "success_title",
      "label": "Success Title",
      "default": "You're on the list!"
    },
    {
      "type": "text",
      "id": "success_subtitle",
      "label": "Success Subtitle",
      "default": "We'll notify you when we launch"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success Message",
      "default": "Thanks for signing up!"
    },
    {
      "type": "select",
      "id": "success_button_color",
      "label": "Success Button Color",
      "options": [
        {
          "value": "bg-orange-500",
          "label": "Orange"
        },
        {
          "value": "bg-blue-500",
          "label": "Blue"
        },
        {
          "value": "bg-green-500",
          "label": "Green"
        },
        {
          "value": "bg-red-500",
          "label": "Red"
        },
        {
          "value": "bg-purple-500",
          "label": "Purple"
        },
        {
          "value": "bg-gray-800",
          "label": "Dark Gray"
        },
        {
          "value": "bg-black",
          "label": "Black"
        }
      ],
      "default": "bg-black"
    }
  ],
  "presets": [
    {
      "name": "Big Timer"
    }
  ]
}
{% endschema %}
