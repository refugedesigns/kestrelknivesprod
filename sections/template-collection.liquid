<script>
  window.__collectionProducts = {{ collection.products | json }};
</script>

<div class='px-4 py-16 mx-auto' x-data='collectionPage()' x-cloak>
  {% comment %}
    <a
      href='{{ routes.collections_url }}'
      class='text-base text-gray-500 hover:underline text-center block my-4'
      >Go back to collections</a
    >
  {% endcomment %}

  {% paginate collection.products by section.settings.number_of_products_per_page | default: 9 %}
    <h1 class='text-3xl font-bold text-center mb-8' x-text='getPageTitle()'>
      {{ collection.title }}
    </h1>

    <div class='max-w-7xl mx-auto'>
      <div class='flex flex-col md:flex-row gap-8'>
        <!-- Filters Sidebar -->
        {% render "collection-filters", collection: collection %}

        <!-- Products Grid -->
        <div class='flex-1'>
          <!-- Products Count -->
          <div class='mb-6'>
            <p class='text-gray-600'>{{ paginate.items }} products</p>
          </div>

          <!-- Products Grid -->
          <div
            class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
            id='products-grid'
          >
            {% comment %}
              Knives special ordering: render products on this page (paginate.items)
              in the order of tags product_1, product_2, ... product_999.
              Any items without such tags are rendered afterwards in original order.
            {% endcomment %}
            {% assign has_knife_filter = false %}
            {% assign url_string = request.path
              | append: "?"
              | append: request.query_string
            %}
            {% if url_string contains "filter.p.product_type=Knives"
              or url_string contains "filter.p.product_type=knives"
            %}
              {% assign has_knife_filter = true %}
            {% endif %}

            {%- comment -%}
              Determine if any product on the current page has explicit position tags.
              This allows sorting to trigger even on /collections/all when filtered to knives.
            {%- endcomment -%}
            {% assign has_position_tags = false %}
            {% for product in collection.products %}
              {%- assign tags_lower = product.tags
                | join: "||"
                | downcase
                | split: "||"
              -%}
              {% for i in (1..999) %}
                {% assign wanted = "product_" | append: i %}
                {% assign wanted_alt = "position_" | append: i %}
                {% if tags_lower contains wanted
                  or tags_lower contains wanted_alt
                %}
                  {% assign has_position_tags = true %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% if has_position_tags %}{% break %}{% endif %}
            {% endfor %}

            {% if collection.handle contains "knife"
              or collection.title contains "Knife"
              or collection.title contains "Knives"
              or has_knife_filter
              or has_position_tags
            %}
              {% assign rendered_ids = "," %}
              {% for i in (1..999) %}
                {% assign wanted = "product_" | append: i %}
                {% assign wanted_alt = "position_" | append: i %}
                {% for product in collection.products %}
                  {%- assign tags_lower = product.tags
                    | join: "||"
                    | downcase
                    | split: "||"
                  -%}
                  {% if tags_lower contains wanted
                    or tags_lower contains wanted_alt
                  %}
                    {% render "product-card", product_product: product %}
                    {% assign rendered_ids = rendered_ids
                      | append: product.id
                      | append: ","
                    %}
                  {% endif %}
                {% endfor %}
              {% endfor %}

              {%- comment -%} Render any remaining items without product_N tag {%- endcomment -%}
              {% for product in collection.products %}
                {% assign pid = product.id | append: "," %}
                {% unless rendered_ids contains pid %}
                  {% render "product-card", product_product: product %}
                {% endunless %}
              {% endfor %}
            {% else %}
              {% for product in collection.products %}
                {% render "product-card", product_product: product %}
              {% else %}
                <div class='col-span-full text-center py-12'>
                  <p class='text-gray-500 text-lg'>
                    There are no products in this collection
                  </p>
                </div>
              {% endfor %}
            {% endif %}
          </div>

          <!-- Pagination -->
          {% if paginate.pages > 1 %}
            <div class='mt-12'>
              {% render "pagination", pagination: paginate %}
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  {% endpaginate %}
</div>

<script>
  function collectionPage() {
    return {
      init() {
        // Listen for legacy filter changes
        window.addEventListener('filter-products', event => {
          this.applyFilters(event.detail)
        })
        // Client-side price filtering (new)
        window.addEventListener('price-filter', e => {
          const { min, max } = e.detail || {}
          this.applyPriceFilter(min, max)
        })
      },

      toTitleCase(str) {
        try {
          return String(str || '')
            .toLowerCase()
            .split(/\s+/)
            .map(w => w.charAt(0).toUpperCase() + w.slice(1))
            .join(' ')
        } catch (e) {
          return str
        }
      },

      getPageTitle() {
        try {
          const url = new URL(window.location.href)
          const types = url.searchParams
            .getAll('filter.p.product_type')
            .filter(Boolean)
          if (types && types.length) {
            const hasKnives = types.some(
              t => String(t).toLowerCase() === 'knives'
            )
            const selected = hasKnives
              ? types.find(t => String(t).toLowerCase() === 'knives')
              : types[0]
            return this.toTitleCase(selected)
          }

          // No explicit filter param; attempt to infer from collection handle
          const path = window.location.pathname || ''
          const m = path.match(/\/collections\/([^\/]+)/)
          const handle = m && m[1] ? decodeURIComponent(m[1]) : ''
          if (handle && handle !== 'all') {
            const toHandle = s =>
              String(s || '')
                .toLowerCase()
                .trim()
                .replace(/[^a-z0-9]+/g, '-')
                .replace(/^-+|-+$/g, '')
            const matchesHandle = (typeValue, h) => {
              const th = toHandle(typeValue)
              if (th === h) return true
              if (h.endsWith('s') && th === h.slice(0, -1)) return true
              if (th.endsWith('s') && h === th.slice(0, -1)) return true
              if (th.endsWith('-' + h)) return true
              return false
            }
            const filterComponent = document.querySelector(
              '[x-data*="collectionFilters"]'
            )
            const typesArr =
              (filterComponent &&
                filterComponent._x_dataStack &&
                filterComponent._x_dataStack[0] &&
                filterComponent._x_dataStack[0].productTypes) ||
              []
            const match = typesArr.find(t => matchesHandle(t.value, handle))
            if (match && match.value) return this.toTitleCase(match.value)
          }
        } catch (e) {
          /* ignore */
        }
        // Fallbacks: show "All Products" on /collections/all, otherwise collection title
        try {
          const path = window.location.pathname || ''
          const m = path.match(/\/collections\/([^\/]+)/)
          const handle = m && m[1] ? decodeURIComponent(m[1]) : ''
          if (!handle || handle === 'all') return 'All Products'
        } catch (e) {
          /* ignore */
        }
        return '{{ collection.title }}'
      },

      applyFilters(filterData) {
        // Get all product cards
        const productCards = document.querySelectorAll('[data-product]')
        let visibleCount = 0

        productCards.forEach(card => {
          const productData = JSON.parse(card.dataset.product)
          let shouldShow = true

          // Filter by availability
          if (filterData.filters.availability.length > 0) {
            const isInStock = productData.available
            const hasInStockFilter =
              filterData.filters.availability.includes('in-stock')
            const hasOutOfStockFilter =
              filterData.filters.availability.includes('out-of-stock')

            if (hasInStockFilter && hasOutOfStockFilter) {
              // Show all products
            } else if (hasInStockFilter && !isInStock) {
              shouldShow = false
            } else if (hasOutOfStockFilter && isInStock) {
              shouldShow = false
            } else if (!hasInStockFilter && !hasOutOfStockFilter) {
              shouldShow = false
            }
          }

          // Filter by selected product types
          if (
            shouldShow &&
            filterData.filters.productType &&
            filterData.filters.productType.length > 0
          ) {
            const productType = (
              productData.product_type ||
              productData.type ||
              ''
            )
              .toString()
              .trim()
            if (!filterData.filters.productType.includes(productType)) {
              shouldShow = false
            }
          }

          // Filter by price range
          if (shouldShow && filterData.priceRange) {
            const productPrice = productData.price / 100 // Convert from cents
            if (
              productPrice < filterData.priceRange.min ||
              productPrice > filterData.priceRange.max
            ) {
              shouldShow = false
            }
          }

          // Show/hide the product card
          if (shouldShow) {
            card.style.display = 'block'
            visibleCount++
          } else {
            card.style.display = 'none'
          }
        })

        // Update product count
        const countElement = document.querySelector('.text-gray-600')
        if (countElement) {
          countElement.textContent = `${visibleCount} products`
        }
      },

      applyPriceFilter(min, max) {
        const productCards = document.querySelectorAll('[data-product]')
        let visibleCount = 0
        productCards.forEach(card => {
          try {
            const productData = JSON.parse(card.dataset.product || '{}')
            const price = (productData.price || 0) / 100
            const inRange =
              (!isNaN(min) ? price >= min : true) &&
              (!isNaN(max) ? price <= max : true)
            card.style.display = inRange ? 'block' : 'none'
            if (inRange) visibleCount++
          } catch (err) {
            // ignore parsing errors
          }
        })
        const countElement = document.querySelector('.text-gray-600')
        if (countElement) countElement.textContent = `${visibleCount} products`
      },
    }
  }
</script>

{% schema %}
{
  "name": "Template Collection",
  "settings": [
    {
      "type": "number",
      "id": "number_of_products_per_page",
      "default": 9,
      "label": "Number of products per page"
    },
    {
      "type": "header",
      "content": "Color Variant Images"
    },
    {
      "type": "image_picker",
      "id": "orange_image",
      "label": "Orange Color Image",
      "info": "Upload an image for orange color variants"
    },
    {
      "type": "image_picker",
      "id": "black_orange_image",
      "label": "Black w/Orange Liner Image",
      "info": "Upload an image for black with orange liner variants"
    },
    {
      "type": "image_picker",
      "id": "black_image",
      "label": "Black Color Image",
      "info": "Upload an image for black color variants"
    },
    {
      "type": "image_picker",
      "id": "green_image",
      "label": "Green Color Image",
      "info": "Upload an image for green color variants"
    },
    {
      "type": "image_picker",
      "id": "camo_image",
      "label": "Camo/Earth Color Image",
      "info": "Upload an image for camo or earth color variants"
    },
    {
      "type": "image_picker",
      "id": "high_vis_orange_image",
      "label": "High Vis Orange Image"
    },
    {
      "type": "image_picker",
      "id": "high_vis_green_image",
      "label": "High Vis Green Image"
    }
  ]
}
{% endschema %}
