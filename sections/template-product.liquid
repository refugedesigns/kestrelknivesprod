<script
  src='https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js'
></script>

{% assign selected_variant = product.selected_or_first_available_variant %}

<style>
  swiper-container {
    width: 100%;
    height: 100%;
  }

  swiper-slide {
    text-align: center;
    font-size: 18px;
    background: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  swiper-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .mainSwiper {
    height: 600px;
    width: 100%;
    margin-bottom: 10px;
  }

  .thumbSwiper {
    height: 80px;
    box-sizing: border-box;
    padding: 10px 0;
  }

  .thumbSwiper swiper-slide {
    width: 25%;
    height: 100%;
    opacity: 0.4;
    cursor: pointer;
  }

  .thumbSwiper .swiper-slide-thumb-active {
    opacity: 1;
  }

  .thumbSwiper swiper-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .product--information {
    height: fit-content;
  }

  .prose {
    line-height: 1.4;
  }

  .prose p {
    margin-bottom: 0.5rem;
  }

  /* .prose br {
    line-height: 0.4;
  } */
</style>

<div class='max-w-6xl mx-auto my-8' x-data='productPage()'>
  <div class='grid grid-cols-1 md:grid-cols-2 gap-8'>
    <!-- Product Media Gallery -->
    <div class='product--medias'>
      <!-- Main Swiper with Thumbs -->
      <div class='relative'>
        <swiper-container
          style='--swiper-navigation-color: #000; --swiper-pagination-color: #000'
          class='mainSwiper'
          thumbs-swiper='.thumbSwiper'
          space-between='10'
          navigation='true'
        >
          {% for media in product.media %}
            <swiper-slide>
              {% render "product-media", media: media %}
            </swiper-slide>
          {% endfor %}
        </swiper-container>

        <!-- Magnifying Glass Icon -->
        <button
          @click='openFullscreenGallery()'
          class='absolute bottom-4 right-4 hover:cursor-pointer bg-white hover:bg-gray-50 p-3 transition-all duration-200 hover:scale-110 z-10 border border-gray-200'
          title='View fullscreen'
        >
          <svg
            class='w-6 h-6 text-gray-800'
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
          >
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7'/>
          </svg>
        </button>
      </div>

      <!-- Thumbnail Swiper -->
      <swiper-container
        class='thumbSwiper'
        space-between='2'
        slides-per-view='4'
        free-mode='true'
        watch-slides-progress='true'
      >
        {% for media in product.media %}
          <swiper-slide>
            {% render "product-media", media: media %}
          </swiper-slide>
        {% endfor %}
      </swiper-container>
    </div>

    <div class='product--information sticky top-5 p-2'>
      {% form "product",
        product,
        id: "product-form",
        novalidate: "novalidate"
      %}
        <input type='hidden' name='id' value='{{ selected_variant.id }}'>
        <input type='hidden' name='return_to' value='/cart'>

        {% for block in section.blocks %}
          {% case block.type %}
            {% when "vendor" %}
              <div class='my-3'>
                <span class='text-xs text-gray-500'>{{ product.vendor }}</span>
              </div>
            {% when "title" %}
              <div class='my-3'>
                <h1 class='text-3xl font-bold text-gray-900'>
                  {{ product.title }}
                </h1>
              </div>
            {% when "price" %}
              <div class='my-3' id='price-{{ section.id }}'>
                <span class='text-base text-gray-500 line-through'>
                  {{ selected_variant.compare_at_price | money }}
                </span>
                <span class='text-lg text-gray-900'>
                  {{ selected_variant.price | money }}
                </span>

                {% if selected_variant.price < selected_variant.compare_at_price
                %}
                  <span class='px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4'>
                    Sale
                  </span>
                {% endif %}
              </div>
            {% when "description" %}
              <div class='my-3'>
                <div class='text-gray-700 prose prose-sm max-w-none'>
                  {{ product.description | newline_to_br }}
                </div>
              </div>
            {% when "variant_selector" %}
              <div class='my-3'>
                {% unless product.has_only_default_variant %}
                  <variant-selector
                    data-url='{{ product.url}}'
                    data-section='{{ section.id }}'
                  >
                    {% for option in product.options_with_values %}
                      <div class='my-4'>
                        <label
                          for='Option-{{ section.id }}-{{ forloop.index0 }}'
                          class='block font-medium text-black text-xl mb-2'
                        >
                          {{ option.name }}
                        </label>

                        <div class='flex flex-wrap gap-3'>
                          {% for value in option.values %}
                            {% assign is_selected = false %}
                            {% if option.selected_value == value %}
                              {% assign is_selected = true %}
                            {% endif %}

                            {% comment %} Find a variant with this option value to get featured image {% endcomment %}
                            {% assign option_image = null %}
                            {% for variant in product.variants %}
                              {% if option.name == product.options[0]
                                and variant.option1 == value
                              %}
                                {% if variant.featured_image %}
                                  {% assign option_image = variant.featured_image %}
                                  {% break %}
                                {% endif %}
                              {% elsif option.name == product.options[1]
                                and variant.option2 == value
                              %}
                                {% if variant.featured_image %}
                                  {% assign option_image = variant.featured_image %}
                                  {% break %}
                                {% endif %}
                              {% endif %}
                            {% endfor %}

                            <div class='flex flex-col items-center space-y-2'>
                              <button
                                type='button'
                                class='
                                  variant-option-btn flex items-center justify-center p-2 border-2 transition-colors w-16 h-16 cursor-pointer
                                  {% if is_selected %}border-black{% else %}border-gray-300 hover:border-gray-400{% endif %}
                                '
                                data-option='{{ option.name | escape }}'
                                data-value='{{ value | escape }}'
                              >
                                {% if option_image %}
                                  <img
                                    src='{{ option_image | img_url: "48x48" }}'
                                    alt='{{ value }}'
                                    class='w-full h-full object-cover'
                                  >
                                {% else %}
                                  <div class='w-full h-full bg-gray-100 flex items-center justify-center'>
                                    <span class='text-gray-400 text-xs'>
                                      {{- value | slice: 0, 1 -}}
                                    </span>
                                  </div>
                                {% endif %}
                              </button>

                              <span class='text-xs font-bold text-gray-900 uppercase text-center break-words leading-tight max-w-16'>
                                {{- value -}}
                              </span>
                            </div>
                          {% endfor %}
                        </div>
                      </div>
                    {% endfor %}

                    <script type='application/json'>
                      {{ product.variants | json }}
                    </script>
                  </variant-selector>
                {% endunless %}
              </div>

            {% when "checkout_buttons" %}
              <div class='my-3'>
                <div class='flex items-center gap-4'>
                  <!-- Quantity Selector -->
                  <div class='flex items-center border border-gray-300'>
                    <button
                      type='button'
                      class='quantity-btn px-3 py-2 text-lg font-medium hover:bg-gray-100'
                      data-action='decrease'
                    >
                      -
                    </button>
                    <input
                      type='number'
                      name='quantity'
                      id='Quantity-{{ section.id }}'
                      value='1'
                      min='1'
                      class='w-16 text-center border-0 focus:outline-none focus:ring-0'
                      readonly
                    >
                    <button
                      type='button'
                      class='quantity-btn px-3 py-2 text-lg font-medium hover:bg-gray-100'
                      data-action='increase'
                    >
                      +
                    </button>
                  </div>

                  <!-- Add to Cart Button -->
                  <button
                    type='submit'
                    name='add'
                    class='flex-1 bg-black hover:bg-gray-900 cursor-pointer text-white font-bold py-3 px-6 transition-colors duration-200 {% if selected_variant.available == false %}opacity-50 cursor-not-allowed{% endif %}'
                    {% if selected_variant.available == false %}
                      disabled
                    {% endif %}
                  >
                    {% if selected_variant.available == false %}
                      Sold out
                    {% else %}
                      ADD TO CART
                    {% endif %}
                  </button>
                </div>
              </div>
            {% else %}

          {% endcase %}
        {% endfor %}
      {% endform %}
    </div>
  </div>
</div>

<!-- Fullscreen Gallery Modal -->
<div
  x-data='fullscreenGallery()'
  x-show='isOpen'
  x-transition:enter='transition ease-out duration-300'
  x-transition:enter-start='opacity-0'
  x-transition:enter-end='opacity-100'
  x-transition:leave='transition ease-in duration-200'
  x-transition:leave-start='opacity-100'
  x-transition:leave-end='opacity-0'
  class='fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center'
  style='display: none;'
  @click.self='closeGallery'
>
  <!-- Close Button -->
  <button
    @click='closeGallery'
    class='absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-10'
  >
    <svg class='w-8 h-8' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
      <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'/>
    </svg>
  </button>

  <!-- Fullscreen Swiper -->
  <div class='w-full h-full max-w-6xl max-h-[90vh] mx-4'>
    <swiper-container
      style='--swiper-navigation-color: #000; --swiper-pagination-color: #000'
      class='w-full h-full'
      space-between='10'
      navigation='true'
      :initial-slide='currentSlide'
    >
      {% for media in product.media %}
        <swiper-slide class='flex items-center justify-center'>
          {% render "product-media", media: media %}
        </swiper-slide>
      {% endfor %}
    </swiper-container>
  </div>
</div>

<script>
  class VariantSelector extends HTMLElement {
    constructor() {
      super()
      this.addEventListener('click', this.onVariantChange)
      this.selectedOptions = {}
    }

    connectedCallback() {
      this.initializeSelectedOptions()
    }

    initializeSelectedOptions() {
      // Set initial selected options based on current variant
      const currentVariant = this.getVariantJSON().find(v => v.id === {{ selected_variant.id }})
      if (currentVariant) {
        this.selectedOptions = {}
        
        // Get all option names from the buttons
        const optionNames = Array.from(this.querySelectorAll('[data-option]')).map(btn => btn.dataset.option)
        const uniqueOptionNames = [...new Set(optionNames)]
        
        // Map current variant options to option names
        uniqueOptionNames.forEach((optionName, index) => {
          if (currentVariant.options[index]) {
            this.selectedOptions[optionName] = currentVariant.options[index]
          }
        })
        
        // Update button states
        Object.entries(this.selectedOptions).forEach(([option, value]) => {
          const button = this.querySelector(`[data-option="${option}"][data-value="${value}"]`)
          if (button) {
            this.updateButtonStates(option, button)
          }
        })
        
        console.log('Initialized with options:', this.selectedOptions)
      }
    }

    onVariantChange(event) {
      // Find the closest button with variant-option-btn class
      const button = event.target.closest('.variant-option-btn')
      
      if (button) {
        event.preventDefault()
        event.stopPropagation()
        
        const option = button.dataset.option
        const value = button.dataset.value
        
        console.log('Clicked option:', option, 'value:', value)
        
        // Update selected option
        this.selectedOptions[option] = value
        
        // Update button states
        this.updateButtonStates(option, button)
        
        // Get selected variant and update
        this.getSelectedVariant()
        
        if (this.currentVariant) {
          this.updateURL()
          this.updateFormID()
          this.updatePrice()
        }
      }
    }

    updateButtonStates(option, clickedButton) {
      // Remove selected state from all buttons for this option
      const allButtons = this.querySelectorAll(`[data-option="${option}"]`)
      allButtons.forEach(btn => {
        btn.classList.remove('border-black')
        btn.classList.add('border-gray-300')
      })
      
      // Add selected state to clicked button
      clickedButton.classList.remove('border-gray-300')
      clickedButton.classList.add('border-black')
    }

    getSelectedOptions() {
      this.options = Object.values(this.selectedOptions)
      console.log(this.options)
    }

    getVariantJSON() {
      this.variantData =
        this.variantData ||
        JSON.parse(this.querySelector('[type="application/json"]').textContent)
      return this.variantData
    }

    getSelectedVariant() {
      this.getSelectedOptions()
      this.currentVariant = this.getVariantJSON().find(variant => {
        // Get the selected options in the correct order
        const selectedOptions = Object.values(this.selectedOptions)
        
        // Check if all selected options match the variant options
        const findings = !variant.options
          .map((option, index) => {
            return selectedOptions[index] === option
          })
          .includes(false)

        if (findings) return variant
      })

      console.log('Selected variant:', this.currentVariant)
    }

    updateURL() {
      if (!this.currentVariant) return
      window.history.replaceState(
        {},
        '',
        `${this.dataset.url}?variant=${this.currentVariant.id}`
      )
    }

    updateFormID() {
      const form_input = document
        .querySelector('#product-form')
        .querySelector('input[name="id"]')
      form_input.value = this.currentVariant.id
    }

    updatePrice() {
      fetch(
        `${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`
      )
        .then(response => response.text())
        .then(responseText => {
          const id = `price-${this.dataset.section}`
          const html = new DOMParser().parseFromString(
            responseText,
            'text/html'
          )

          const oldPrice = document.getElementById(id)
          const newPrice = html.getElementById(id)

          if (oldPrice && newPrice) oldPrice.innerHTML = newPrice.innerHTML
        })
    }
  }

  customElements.define('variant-selector', VariantSelector)

  // Quantity selector functionality
  document.addEventListener('DOMContentLoaded', function() {
    const quantityBtns = document.querySelectorAll('.quantity-btn')
    const quantityInput = document.querySelector('input[name="quantity"]')
    
    quantityBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const action = this.dataset.action
        const currentValue = parseInt(quantityInput.value)
        
        if (action === 'increase') {
          quantityInput.value = currentValue + 1
        } else if (action === 'decrease' && currentValue > 1) {
          quantityInput.value = currentValue - 1
        }
      })
    })

    // Intercept product form submission
    const productForm = document.getElementById('product-form')
    if (productForm) {
      productForm.addEventListener('submit', async function(e) {
        e.preventDefault()
        
        const formData = new FormData(this)
        const variantId = formData.get('id')
        const quantity = parseInt(formData.get('quantity')) || 1
        
        try {
          // Get the cart sheet component
          const cartSheet = document.querySelector('[x-data*="cartSheet"]')
          if (cartSheet && cartSheet._x_dataStack && cartSheet._x_dataStack[0]) {
            await cartSheet._x_dataStack[0].addToCart(variantId, quantity)
          } else {
            // Fallback: direct API call
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: variantId,
                quantity: quantity,
              }),
            })

            if (response.ok) {
              // Dispatch event to open cart
              window.dispatchEvent(new CustomEvent('open-cart'))
            } else {
              throw new Error('Failed to add to cart')
            }
          }
        } catch (error) {
          console.error('Error adding to cart:', error)
          alert('Failed to add item to cart. Please try again.')
        }
      })
    }
  })

  // Product page functionality
  function productPage() {
    return {
      openFullscreenGallery() {
        console.log('Opening fullscreen gallery...')
        
        // Get current slide index from main swiper
        const mainSwiper = document.querySelector('.mainSwiper')
        let currentSlide = 0
        if (mainSwiper && mainSwiper.swiper) {
          currentSlide = mainSwiper.swiper.activeIndex
        }
        
        // Open fullscreen gallery
        const fullscreenGallery = document.querySelector('[x-data*="fullscreenGallery"]')
        if (fullscreenGallery && fullscreenGallery._x_dataStack && fullscreenGallery._x_dataStack[0]) {
          fullscreenGallery._x_dataStack[0].currentSlide = currentSlide
          fullscreenGallery._x_dataStack[0].isOpen = true
          document.body.style.overflow = 'hidden'
          console.log('Fullscreen gallery opened')
        } else {
          console.log('Fullscreen gallery element not found')
        }
      }
    }
  }

  // Fullscreen gallery functionality
  function fullscreenGallery() {
    return {
      isOpen: false,
      currentSlide: 0,

      closeGallery() {
        this.isOpen = false
        document.body.style.overflow = ''
      }
    }
  }
</script>

{% schema %}
{
  "name": "Product",
  "blocks": [
    {
      "type": "vendor",
      "name": "Vendor",
      "limit": 1
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1
    },
    {
      "type": "price",
      "name": "Price",
      "limit": 1
    },
    {
      "type": "description",
      "name": "Description",
      "limit": 1
    },
    {
      "type": "variant_selector",
      "name": "Variant Selector",
      "limit": 1
    },
    {
      "type": "checkout_buttons",
      "name": "Checkout Buttons",
      "limit": 1
    }
  ],
  "presets": [
    {
      "name": "Product",
      "blocks": [
        {
          "type": "vendor"
        },
        {
          "type": "title"
        },
        {
          "type": "price"
        },
        {
          "type": "description"
        },
        {
          "type": "variant_selector"
        },
        {
          "type": "checkout_buttons"
        }
      ]
    }
  ]
}
{% endschema %}
