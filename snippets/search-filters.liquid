<!-- Search Filters -->
<div
  class='mb-8 md:mb-0'
  x-data='searchFilters()'
>
  <div class='bg-white border border-gray-200 rounded-lg p-8'>
    <h3 class='text-lg font-bold text-gray-900 mb-6'>Filters</h3>

    <!-- Product Type Filter -->
    <div class='mb-6'>
      <button
        @click='toggleFilter("productType")'
        class='flex items-center justify-between w-full text-left font-semibold text-gray-900 mb-3'
      >
        <span>PRODUCT TYPE</span>
        <svg
          class='w-4 h-4 transition-transform duration-200'
          :class="filtersOpen.productType ? 'rotate-180' : ''"
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
        >
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'/>
        </svg>
      </button>

      <div x-show='filtersOpen.productType' class='space-y-2'>
        <template x-for='productType in productTypes' :key='productType.name'>
          <label class='flex items-center space-x-2 cursor-pointer'>
            <input
              type='checkbox'
              x-model='selectedFilters.productType'
              :value='productType.name'
              @change='applyFilters()'
              class='rounded border-gray-300 text-black focus:ring-gray-900'
            >
            <span class='text-sm text-gray-700'
              ><span x-text='productType.name.toUpperCase()'></span> (<span
                x-text='productType.count'
              ></span
              >)</span
            >
          </label>
        </template>
      </div>
    </div>

    <!-- Availability Filter -->
    <div class='mb-6'>
      <button
        @click='toggleFilter("availability")'
        class='flex items-center justify-between w-full text-left font-semibold text-gray-900 mb-3'
      >
        <span>AVAILABILITY</span>
        <svg
          class='w-4 h-4 transition-transform duration-200'
          :class="filtersOpen.availability ? 'rotate-180' : ''"
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
        >
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'/>
        </svg>
      </button>

      <div x-show='filtersOpen.availability' class='space-y-2'>
        <label class='flex items-center space-x-2 cursor-pointer'>
          <input
            type='checkbox'
            x-model='selectedFilters.availability'
            value='in-stock'
            @change='applyFilters()'
            class='rounded border-gray-300 text-black focus:ring-gray-900'
          >
          <span class='text-sm text-gray-700'
            >In stock (<span x-text='inStockCount'></span>)</span
          >
        </label>
        <label class='flex items-center space-x-2 cursor-pointer'>
          <input
            type='checkbox'
            x-model='selectedFilters.availability'
            value='out-of-stock'
            @change='applyFilters()'
            class='rounded border-gray-300 text-black focus:ring-gray-900'
          >
          <span class='text-sm text-gray-700'
            >Out of stock (<span x-text='outOfStockCount'></span>)</span
          >
        </label>
      </div>
    </div>

    <!-- Price Filter -->
    <div class='mb-6'>
      <button
        @click='toggleFilter("price")'
        class='flex items-center justify-between w-full text-left font-semibold text-gray-900 mb-3'
      >
        <span>PRICE</span>
        <svg
          class='w-4 h-4 transition-transform duration-200'
          :class="filtersOpen.price ? 'rotate-180' : ''"
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
        >
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'/>
        </svg>
      </button>

      <div x-show='filtersOpen.price' class='space-y-4'>
        <!-- Price Range Slider Container -->
        <div class='relative h-6 mb-6'>
          <!-- Background Track -->
          <div
            class='absolute top-1/2 left-0 right-0 h-2 bg-gray-200 rounded-lg transform -translate-y-1/2'
          ></div>

          <!-- Active Range Track -->
          <div
            id='search-progress'
            class='absolute top-1/2 h-2 bg-gray-400 rounded-lg transform -translate-y-1/2'
          ></div>

          <!-- Min Range Input -->
          <input
            id='search-minRange'
            type='range'
            x-model='priceRange.min'
            :min='minPrice'
            :max='maxPrice'
            step='0.01'
            @input='updateSlider()'
            class='absolute top-1/2 left-0 w-full h-2 bg-transparent appearance-none cursor-pointer transform -translate-y-1/2'
            style='pointer-events: none;'
          >

          <!-- Max Range Input -->
          <input
            id='search-maxRange'
            type='range'
            x-model='priceRange.max'
            :min='minPrice'
            :max='maxPrice'
            step='0.01'
            @input='updateSlider()'
            class='absolute top-1/2 left-0 w-full h-2 bg-transparent appearance-none cursor-pointer transform -translate-y-1/2'
            style='pointer-events: none;'
          >
        </div>

        <!-- Price Input Fields -->
        <div class='flex items-center space-x-2'>
          <div class='flex-1'>
            <input
              type='number'
              x-model='priceRange.min'
              :min='minPrice'
              :max='maxPrice'
              step='0.01'
              @input='updatePriceRange()'
              class='w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-gray-900'
              placeholder='$0'
            >
          </div>
          <span class='text-sm text-gray-500'>to</span>
          <div class='flex-1'>
            <input
              type='number'
              x-model='priceRange.max'
              :min='minPrice'
              :max='maxPrice'
              step='0.01'
              @input='updatePriceRange()'
              class='w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-gray-900'
              placeholder='$1000'
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Clear Filters Button -->
    <button
      @click='clearFilters'
      class='w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded transition-colors duration-200'
    >
      Clear Filters
    </button>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('searchFilters', () => ({
      filtersOpen: {
        productType: true,
        availability: true,
        price: true
      },
      selectedFilters: {
        productType: [],
        availability: []
      },
      priceRange: {
        min: 0,
        max: 1000
      },
      minPrice: 0,
      maxPrice: 1000,

      init() {
        // Calculate price range from search results
        this.calculatePriceRange()

        // Initialize slider after a short delay to ensure DOM is ready
        setTimeout(() => {
          this.updateSlider()
        }, 100)
      },

      toggleFilter(filterName) {
        this.filtersOpen[filterName] = !this.filtersOpen[filterName]
      },

      clearFilters() {
        this.selectedFilters = {
          productType: [],
          availability: []
        }
        this.priceRange = {
          min: this.minPrice,
          max: this.maxPrice
        }
        this.applyFilters()
      },

      calculatePriceRange() {
        // Calculate from search results
        const products = {{ search.results | json }}
        if (products && products.length > 0) {
          const prices = products.map(p => p.price / 100) // Convert from cents
          // Normalize to 2 decimal places to avoid floating-point artifacts
          const round2 = v => Math.round(v * 100) / 100
          this.minPrice = round2(Math.min(...prices))
          this.maxPrice = round2(Math.max(...prices))
          this.priceRange.min = this.minPrice
          this.priceRange.max = this.maxPrice
        } else {
          this.minPrice = 0
          this.maxPrice = 1000
          this.priceRange.min = this.minPrice
          this.priceRange.max = this.maxPrice
        }
      },

      get productCount() {
        const products = {{ search.results | json }}
        return products ? products.length : 0
      },

      get productTypes() {
        const products = {{ search.results | json }}
        if (!products || products.length === 0) return []

        // Group products by type
        const typeGroups = {}
        products.forEach(product => {
          const type = product.type || 'uncategorized'
          if (!typeGroups[type]) {
            typeGroups[type] = 0
          }
          typeGroups[type]++
        })

        // Convert to array format
        return Object.entries(typeGroups).map(([name, count]) => ({
          name: name,
          count: count
        })).sort((a, b) => b.count - a.count) // Sort by count descending
      },

      get inStockCount() {
        const products = {{ search.results | json }}
        return products ? products.filter(p => p.available).length : 0
      },

      get outOfStockCount() {
        const products = {{ search.results | json }}
        return products ? products.filter(p => !p.available).length : 0
      },

      formatPrice(price) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 2
        }).format(price)
      },

      updateSlider() {
        const minGap = 10
        const rangeMax = this.maxPrice - this.minPrice

        // Update progress bar
        const progress = document.getElementById('search-progress')
        if (progress) {
          const minPercent = ((this.priceRange.min - this.minPrice) / rangeMax) * 100
          const maxPercent = ((this.priceRange.max - this.minPrice) / rangeMax) * 100

          progress.style.left = minPercent + '%'
          progress.style.right = (100 - maxPercent) + '%'
        }

        this.applyFilters()
      },

      updatePriceRange() {
        const minGap = 10

        // Ensure min doesn't exceed max with gap
        if (this.priceRange.min > this.priceRange.max - minGap) {
          this.priceRange.min = this.priceRange.max - minGap
        }
        if (this.priceRange.max < this.priceRange.min + minGap) {
          this.priceRange.max = this.priceRange.min + minGap
        }

        // Ensure values stay within bounds
        if (this.priceRange.min < this.minPrice) {
          this.priceRange.min = this.minPrice
        }
        if (this.priceRange.max > this.maxPrice) {
          this.priceRange.max = this.maxPrice
        }

        this.updateSlider()
      },

      applyFilters() {
        // Dispatch custom event to filter products
        window.dispatchEvent(new CustomEvent('filter-products', {
          detail: {
            filters: this.selectedFilters,
            priceRange: this.priceRange
          }
        }))
      }
    }))
  })
</script>

<style>
  input[type='range'] {
    -webkit-appearance: none;
    appearance: none;
    width: 100%;
    background: transparent;
    position: absolute;
    pointer-events: none;
  }

  input[type='range']::-webkit-slider-thumb {
    -webkit-appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #6b7280;
    cursor: pointer;
    pointer-events: auto;
    position: relative;
    z-index: 10;
  }

  input[type='range']::-moz-range-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #6b7280;
    cursor: pointer;
    pointer-events: auto;
    position: relative;
    z-index: 10;
  }
</style>
