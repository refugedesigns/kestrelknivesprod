{% comment %}
  Featured Collection Product Card (lean but full behavior)
  - Fixed-width image frame to avoid layout shifts
  - Title + formatted price
  - Image swatches (from variant.featured_image) that only swap the image
  - Knives (non-apparel/accessories): Add to Cart
  - Apparel/Accessories: Quick View drawer with options + Add to Cart
{% endcomment %}

{% assign product_obj = product_product %}

<div
  class='w-full py-6 px-3'
  data-product='{{ product_obj | json | escape }}'
  data-variants='{{ product_obj.variants | json | escape }}'
  data-images='{{ product_obj.images | json | escape }}'
  x-data='fcCard()'
>
  <div class='bg-white overflow-hidden w-full h-[600px] flex flex-col'>
    <!-- Image well -->
    <div class='relative h-[420px] bg-white overflow-hidden flex items-center justify-center'>
      {% assign kk_status = product_obj.metafields.custom.product_status
        | default: product_obj.metafields.custom_fields.product_status
        | default: product_obj.metafields.global.product_status
      %}
      {% if kk_status != blank %}
        <div class='absolute top-4 left-4 bg-black text-white font-bold px-3 py-1 text-sm uppercase z-10'>
          {{ kk_status }}
        </div>
      {% else %}
        <div
          x-show='!isAvailable'
          class='absolute top-4 left-4 bg-black text-white font-bold px-3 py-1 text-sm uppercase z-10'
        >
          SOLD OUT
        </div>
      {% endif %}

      <!-- fixed-width inner box so images never stretch the grid -->
      <a
        href='{{ product_obj.url }}'
        class='relative h-full w-[280px] md:w-[320px] mx-auto block'
        @mouseenter='handleImageHover(true)'
        @mouseleave='handleImageHover(false)'
      >
        <!-- Base image -->
        <img
          width='400'
          height='400'
          :src='currentImage'
          alt='{{ product_obj.title | escape }}'
          :class="'absolute inset-0 w-full h-full object-contain transition-opacity duration-300 ' + ((isHovering && hoverImageLoaded) ? 'opacity-0' : 'opacity-100')"
          loading='lazy'
        >
        <!-- Hover image (crossfades in) -->
        <img
          width='400'
          height='400'
          x-show='secondImageSrc'
          :src='secondImageSrc'
          alt='{{ product_obj.title | escape }}'
          :class="'absolute inset-0 w-full h-full object-contain transition-opacity duration-300 pointer-events-none ' + ((isHovering && hoverImageLoaded) ? 'opacity-100' : 'opacity-0')"
          loading='lazy'
        >
      </a>
    </div>

    <!-- Info -->
    <div class='p-4 md:p-6 flex flex-col justify-between'>
      <div>
        <a href='{{ product_obj.url }}'>
          <h2
            class='text-sm md:text-lg uppercase font-semibold text-gray-900 mb-2 text-center'
            x-text='baseTitle'
          >
            {{ product_obj.title }}
          </h2>
          {% assign product_type_lower = product_obj.type
            | default: ""
            | downcase
          %}
          {% unless product_type_lower contains "custom" %}
            <div
              class='text-lg md:text-2xl font-bold text-gray-900 mb-4 text-center'
              x-text='formattedPrice'
            >
              {{ product_obj.price | money }}
            </div>
          {% endunless %}
        </a>

        <!-- Handle Color Variants (hide for Apparels) -->
        {% assign type_lower = product_obj.type | default: "" | downcase %}
        {% unless product_obj.has_only_default_variant
          or type_lower contains "apparel"
          or type_lower contains "accessories"
        %}
          <div class='mb-2'>
            <div class='flex gap-2 justify-center'>
              {% assign unique_handle_colors = "" %}
              {% for variant in product_obj.variants %}
                {% if variant.option1 and variant.title != "Default Title" %}
                  {% assign color_token = "|"
                    | append: variant.option1
                    | downcase
                    | append: "|"
                  %}
                  {% unless unique_handle_colors contains color_token %}
                    {% assign unique_handle_colors = unique_handle_colors
                      | append: color_token
                    %}
                    <button
                      type='button'
                      class='w-10 h-10 rounded-full border-2 border-gray-300 overflow-hidden focus:outline-none focus:ring-2 focus:ring-black'
                      @click='selectByHandle({{ variant.option1 | json }})'
                      :class="$el.dataset.handleLc && selectedOption1Lc === $el.dataset.handleLc ? 'ring-2 ring-black' : ''"
                      title='{{ variant.option1 }}'
                      data-handle-lc='{{ variant.option1 | strip | downcase }}'
                    >
                      {% if variant.featured_image %}
                        <img
                          src='{{ variant.featured_image.src | image_url: width: 48 }}'
                          width='48'
                          height='48'
                          alt='{{ variant.option1 }}'
                          class='w-full h-full object-contain'
                        >
                      {% endif %}
                    </button>
                  {% endunless %}
                {% endif %}
              {% endfor %}
            </div>
          </div>
        {% endunless %}
      </div>
    </div>

    {% assign type_lower = product_obj.type | default: "" | downcase %}
    {% unless type_lower contains "apparel"
      or type_lower contains "accessories"
    %}
      <!-- Add to Cart for knives/non-apparel -->
      <div class='px-4'>
        <button
          x-show='isAvailable'
          @click='addToCart'
          :disabled='isAddingToCart'
          class='w-full bg-black hover:bg-gray-900 text-white font-semibold py-2 md:py-3 px-3 md:px-4 text-xs md:text-base transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed'
        >
          <span x-text="isAddingToCart ? 'Adding...' : '+ ADD TO CART'"></span>
        </button>
      </div>
    {% else %}
      <!-- Quick View button for apparel/accessories -->
      <div class='px-4'>
        <button
          type='button'
          @click='openQuickView()'
          class='w-full bg-black text-white uppercase font-semibold py-2 md:py-3 px-3 md:px-4 text-xs md:text-base hover:bg-gray-900'
        >
          Quick View
        </button>
      </div>
    {% endunless %}

    <!-- Quick View Drawer (inside same Alpine component) -->
    {% if type_lower contains "apparel" or type_lower contains "accessories" %}
      <template x-if='isQuickViewOpen'>
        <div class='fixed inset-0 z-50' x-cloak>
          <div
            class='absolute inset-0 bg-black/50'
            @click='closeQuickView()'
          ></div>
          <div
            x-ref='qvPanel'
            class='absolute right-0 top-0 h-full w-full max-w-lg bg-white shadow-xl flex flex-col transform transition-transform duration-300 translate-x-full'
            x-init='requestAnimationFrame(()=> $el.classList.remove("translate-x-full"))'
          >
            <div class='flex items-center justify-between p-5 border-b border-gray-200'>
              <h3 class='text-lg font-semibold'>Select options</h3>
              <button
                @click='closeQuickView()'
                class='text-gray-500 hover:text-gray-700 text-2xl leading-none'
              >
                Ã—
              </button>
            </div>
            <div class='p-6 flex-1 overflow-y-auto'>
              <div class='flex items-start space-x-6'>
                <img
                  :src='qvImage || currentImage'
                  alt=''
                  width='160'
                  height='160'
                  class='w-40 h-40 object-cover'
                >
                <div class='min-w-0'>
                  <p class='text-gray-900 uppercase text-lg truncate'>
                    {{ product_obj.title }}
                  </p>
                  <p class='text-base mt-2' x-text='formattedPrice'></p>
                </div>
              </div>

              {% unless product_obj.has_only_default_variant %}
                <template x-if='(optionNames && optionNames.length) || (variantsData && variantsData.length)'>
                  <div>
                    <!-- Option 1 -->
                    <div class='mt-6' x-show='uniqueOptionValues(1).length'>
                      <p
                        class='text-xs font-semibold text-gray-700 mb-2 uppercase'
                        x-text='(optionNames[0] || "Option 1") + ":"'
                      ></p>
                      <div
                        class='flex flex-wrap gap-3'
                        x-show='isColorOption(1)'
                      >
                        <template
                          x-for='val in uniqueOptionValues(1)'
                          :key='`c1-${val}`'
                        >
                          <button
                            @click='qvOption1 = val; updateQVSelectedVariant()'
                            :title='val'
                            :class="'w-12 h-12 rounded-md border overflow-hidden ' + (qvOption1 === val ? 'ring-2 ring-black' : '')"
                          >
                            <img
                              :src='imageForOptionValue(1,val)'
                              alt=''
                              width='48'
                              height='48'
                              class='w-full h-full object-contain'
                            >
                          </button>
                        </template>
                      </div>
                      <div
                        class='flex flex-wrap gap-2'
                        x-show='!isColorOption(1)'
                      >
                        <template
                          x-for='val in uniqueOptionValues(1)'
                          :key='`t1-${val}`'
                        >
                          <button
                            @click='qvOption1 = val; updateQVSelectedVariant()'
                            :class="(qvOption1 === val ? 'ring-2 ring-black ' : '') + 'px-4 py-3 border rounded-md text-sm'"
                          >
                            <span x-text='val'></span>
                          </button>
                        </template>
                      </div>
                    </div>
                    <!-- Option 2 -->
                    <div class='mt-6' x-show='uniqueOptionValues(2).length'>
                      <p
                        class='text-xs font-semibold text-gray-700 mb-2 uppercase'
                        x-text='(optionNames[1] || "Option 2") + ":"'
                      ></p>
                      <div
                        class='flex flex-wrap gap-3'
                        x-show='isColorOption(2)'
                      >
                        <template
                          x-for='val in uniqueOptionValues(2)'
                          :key='`c2-${val}`'
                        >
                          <button
                            @click='qvOption2 = val; updateQVSelectedVariant()'
                            :disabled='!isComboAvailable(qvOption1, val)'
                            :title='val'
                            :class="'w-12 h-12 rounded-md border overflow-hidden ' + (qvOption2 === val ? 'ring-2 ring-black' : '') + (!isComboAvailable(qvOption1,val) ? ' opacity-40 cursor-not-allowed' : '')"
                          >
                            <img
                              :src='imageForOptionValue(2,val)'
                              alt=''
                              width='48'
                              height='48'
                              class='w-full h-full object-contain'
                            >
                          </button>
                        </template>
                      </div>
                      <div
                        class='flex flex-wrap gap-2'
                        x-show='!isColorOption(2)'
                      >
                        <template
                          x-for='val in uniqueOptionValues(2)'
                          :key='`t2-${val}`'
                        >
                          <button
                            @click='qvOption2 = val; updateQVSelectedVariant()'
                            :disabled='!isComboAvailable(qvOption1, val)'
                            :class="((qvOption2 === val ? 'ring-2 ring-black ' : '') + 'px-4 py-3 border rounded-md text-sm ') + (!isComboAvailable(qvOption1, val) ? 'opacity-40 cursor-not-allowed' : '')"
                          >
                            <span x-text='val'></span>
                          </button>
                        </template>
                      </div>
                    </div>
                  </div>
                </template>
              {% endunless %}

              <div class='mt-8'>
                <p class='text-xs font-semibold text-gray-700 mb-2 uppercase'>
                  Quantity
                </p>
                <div class='inline-flex items-center border'>
                  <button
                    class='w-10 h-10 text-lg'
                    @click='qvQuantity = Math.max(1, (qvQuantity||1) - 1)'
                  >
                    âˆ’
                  </button>
                  <input
                    type='number'
                    min='1'
                    x-model.number='qvQuantity'
                    class='w-14 h-10 text-center outline-none border-none'
                  >
                  <button
                    class='w-10 h-10 text-lg'
                    @click='qvQuantity = (qvQuantity||1) + 1'
                  >
                    +
                  </button>
                </div>
              </div>

              <div class='mt-6 space-y-3'>
                <button
                  @click='qvAddToCart()'
                  class='w-full cursor-pointer bg-black text-white font-bold py-4 text-base hover:bg-gray-900'
                >
                  Add to Cart
                </button>
                <a
                  href='{{ product_obj.url }}'
                  class='block text-center underline text-gray-700 hover:text-gray-900'
                  >View details</a
                >
              </div>
            </div>
          </div>
        </div>
      </template>
    {% endif %}
  </div>

  <script>
    function fcCard() {
      return {
        currentImage: '',
        baseTitle: '',
        productData: {},
        variantsData: [],
        imagesData: null,
        selectedVariant: null,
        isAvailable: true,
        isAddingToCart: false,
        isHovering: false,
        hoverImageLoaded: false,

        // Quick View state
        isQuickViewOpen: false,
        qvSelectedVariantId: null,
        qvQuantity: 1,
        qvOption1: null,
        qvOption2: null,
        optionNames: [],
        qvImage: null,

        init() {
          try {
            const el = this.$el
            const rawProduct = el.getAttribute('data-product') || '{}'
            const rawVariants = el.getAttribute('data-variants') || '[]'
            const rawImages = el.getAttribute('data-images') || '[]'
            this.productData = JSON.parse(fcDecode(rawProduct))
            this.variantsData = JSON.parse(fcDecode(rawVariants))
            this.imagesData = JSON.parse(fcDecode(rawImages))
            if (this.imagesData && this.imagesData.length) {
              // Optimize the first image URL like the original product card
              const firstImg = this.imagesData[0]
              if (typeof firstImg === 'string') {
                this.currentImage = firstImg
              } else if (firstImg && firstImg.src) {
                this.currentImage = firstImg.src
              }
            }
          } catch (e) {}

          // Choose initial variant
          if (!this.selectedVariant) {
            const avail = (this.variantsData || []).find(v => !!v.available)
            const any = (this.variantsData || [])[0]
            this.selectedVariant = avail ? avail.id : any && any.id
          }

          // Set initial title
          this.updateTitle()

          this.checkAvailability()
        },

        // Price text
        get formattedPrice() {
          if (!this.variantsData || this.variantsData.length === 0) {
            return this.productData.price
              ? this.formatMoney(this.productData.price)
              : ''
          }
          const v = this.variantsData.find(v => v.id === this.selectedVariant)
          if (v && v.price) return this.formatMoney(v.price)
          return this.productData.price
            ? this.formatMoney(this.productData.price)
            : ''
        },

        // URL of second product image, if available
        get secondImageSrc() {
          if (!this.imagesData || this.imagesData.length < 2) return null
          const img = this.imagesData[1]
          if (!img) return null
          if (typeof img === 'string') return img
          return img.src || null
        },

        formatMoney(cents) {
          if (!cents || typeof cents !== 'number') return ''
          try {
            return new Intl.NumberFormat('{{ shop.locale }}', {
              style: 'currency',
              currency: '{{ shop.currency }}',
            }).format(cents / 100)
          } catch (e) {
            return '$' + (cents / 100).toFixed(2)
          }
        },

        checkAvailability() {
          if (this.variantsData && this.variantsData.length > 0) {
            const v = this.variantsData.find(v => v.id === this.selectedVariant)
            this.isAvailable = v ? !!v.available : !!this.productData.available
          } else {
            this.isAvailable = !!this.productData.available
          }
        },

        // Computed: currently selected handle color (option1)
        get selectedOption1() {
          const v = (this.variantsData || []).find(
            v => v.id === this.selectedVariant
          )
          return v && v.option1 ? String(v.option1) : null
        },
        get selectedOption1Lc() {
          return String(this.selectedOption1 || '')
            .trim()
            .toLowerCase()
        },

        // Select by handle color (option1). Prefer an available variant; fallback to first match.
        selectByHandle(handleValue) {
          const hv = String(handleValue || '').trim()
          const matches = (this.variantsData || []).filter(
            v => String(v.option1 || '') === hv
          )
          if (!matches.length) return
          const available = matches.find(v => !!v.available)
          const chosen = available || matches[0]
          this.selectedVariant = chosen.id
          this.updateTitle()
          this.checkAvailability()
          this.updateImage()
        },

        updateTitle() {
          const typeLower = (this.productData.type || '').toLowerCase()
          // For Apparels and Accessories, never append option to title
          const shouldAppend = !(
            typeLower.includes('apparel') || typeLower.includes('accessories')
          )

          if (this.variantsData && this.variantsData.length > 0) {
            // Filter out variants with "Default Title"
            const validVariants = this.variantsData.filter(
              variant => variant.title !== 'Default Title'
            )

            if (validVariants.length > 0) {
              const selectedVariant = validVariants.find(
                v => v.id === this.selectedVariant
              )
              const opt = selectedVariant ? selectedVariant.option1 : null

              if (shouldAppend && opt && !this.isSizeValue(opt)) {
                // Append non-size option (e.g., color) for non-apparel types
                this.baseTitle = `${this.productData.title} - ${String(opt).toUpperCase()}`
              } else {
                this.baseTitle = this.productData.title
              }
            } else {
              // No valid variants (all were "Default Title"), use original title
              this.baseTitle = this.productData.title
            }
          } else {
            // No variants, use original title
            this.baseTitle = this.productData.title
          }
        },

        // Heuristic: treat common size labels as size-like (not for title)
        isSizeValue(val) {
          if (!val) return false
          const v = String(val).toLowerCase().trim()
          const sizeValues = [
            'xxs',
            'xs',
            's',
            'm',
            'l',
            'xl',
            'xxl',
            '2xl',
            '3xl',
            '4xl',
            '5xl',
            'small',
            'medium',
            'large',
            'extra large',
          ]
          return sizeValues.includes(v)
        },

        updateImage() {
          // For apparel, keep using the product's featured_image (do not swap per variant)
          const typeLower = (this.productData.type || '').toLowerCase()
          if (typeLower.includes('apparel')) {
            return
          }
          // Update image when variant changes (for knives/non-apparels)
          if (this.variantsData && this.variantsData.length > 0) {
            const selectedVariant = this.variantsData.find(
              v => v.id === this.selectedVariant
            )

            // If variant has a featured image, use it (already optimized by Shopify)
            if (selectedVariant && selectedVariant.featured_image) {
              this.currentImage = selectedVariant.featured_image.src
            } else {
              // No featured image, use the product's featured image
            }
          }
        },

        handleImageHover(isEntering) {
          if (this.imagesData && this.imagesData.length > 1) {
            if (isEntering) this.preloadSecondImage()
            this.isHovering = isEntering
          }
        },

        preloadSecondImage() {
          if (this.hoverImageLoaded) return
          const src = this.secondImageSrc
          if (!src) return
          const img = new Image()
          img.onload = () => {
            this.hoverImageLoaded = true
          }
          img.src = src
        },

        async addToCart() {
          if (!this.isAvailable || !this.selectedVariant || this.isAddingToCart)
            return
          this.isAddingToCart = true
          try {
            const cartSheet = document.querySelector('[x-data*="cartSheet"]')
            if (
              cartSheet &&
              cartSheet._x_dataStack &&
              cartSheet._x_dataStack[0]
            ) {
              await cartSheet._x_dataStack[0].addToCart(this.selectedVariant, 1)
            } else {
              const formData = new FormData()
              formData.append('id', this.selectedVariant)
              formData.append('quantity', '1')
              const res = await fetch('/cart/add.js', {
                method: 'POST',
                body: formData,
              })
              if (!res.ok) throw new Error('Add to cart failed')
            }
            window.dispatchEvent(new CustomEvent('open-cart'))
          } catch (e) {
            console.error('Featured addToCart error', e)
          } finally {
            this.isAddingToCart = false
          }
        },

        // Quick View
        openQuickView() {
          this.qvSelectedVariantId = this.selectedVariant
          this.qvQuantity = 1
          try {
            const opts = Array.isArray(this.productData.options)
              ? this.productData.options
              : []
            this.optionNames = opts
              .map(o => (typeof o === 'string' ? o : (o && o.name) || ''))
              .filter(Boolean)
          } catch (e) {
            this.optionNames = []
          }
          const current = (this.variantsData || []).find(
            v => v.id === (this.selectedVariant || this.qvSelectedVariantId)
          )
          if (current) {
            this.qvOption1 = current.option1 || null
            this.qvOption2 = current.option2 || null
          }
          this.qvImage = this.currentImage
          this.updateQVSelectedVariant()
          this.isQuickViewOpen = true
          document.body.style.overflow = 'hidden'
        },
        closeQuickView() {
          this.isQuickViewOpen = false
          document.body.style.overflow = ''
        },
        uniqueOptionValues(index) {
          const key = index === 1 ? 'option1' : 'option2'
          const values = new Set()
          ;(this.variantsData || []).forEach(v => {
            const val = v[key]
            if (val) values.add(String(val))
          })
          return Array.from(values)
        },
        isColorOption(index) {
          try {
            const name = String(
              (this.optionNames && this.optionNames[index - 1]) || ''
            ).toLowerCase()
            return ['color', 'colour', 'shade', 'finish'].some(k =>
              name.includes(k)
            )
          } catch (e) {
            return false
          }
        },
        imageForOptionValue(index, val) {
          const key = index === 1 ? 'option1' : 'option2'
          const variantWithImage = (this.variantsData || []).find(
            v =>
              String(v[key] || '') === String(val) &&
              v.featured_image &&
              v.featured_image.src
          )
          if (variantWithImage) return variantWithImage.featured_image.src
          return this.qvImage || this.currentImage
        },
        isComboAvailable(val1, val2) {
          return !!(this.variantsData || []).find(v => {
            const ok1 = val1 ? String(v.option1 || '') === String(val1) : true
            const ok2 = val2 ? String(v.option2 || '') === String(val2) : true
            return ok1 && ok2
          })
        },
        updateQVSelectedVariant() {
          let chosen = null
          if (this.qvOption1 || this.qvOption2) {
            chosen = (this.variantsData || []).find(v => {
              const ok1 = this.qvOption1
                ? String(v.option1 || '') === String(this.qvOption1)
                : true
              const ok2 = this.qvOption2
                ? String(v.option2 || '') === String(this.qvOption2)
                : true
              return ok1 && ok2
            })
          }
          if (chosen) {
            this.qvSelectedVariantId = chosen.id
            if (chosen.featured_image && chosen.featured_image.src)
              this.qvImage = chosen.featured_image.src
          } else {
            this.qvSelectedVariantId = this.selectedVariant
          }
        },
        async qvAddToCart() {
          try {
            const cartSheet = document.querySelector('[x-data*="cartSheet"]')
            if (
              cartSheet &&
              cartSheet._x_dataStack &&
              cartSheet._x_dataStack[0]
            ) {
              await cartSheet._x_dataStack[0].addToCart(
                this.qvSelectedVariantId || this.selectedVariant,
                this.qvQuantity
              )
            } else {
              const formData = new FormData()
              formData.append(
                'id',
                this.qvSelectedVariantId || this.selectedVariant
              )
              formData.append('quantity', String(this.qvQuantity || 1))
              await fetch('/cart/add.js', { method: 'POST', body: formData })
            }
            this.closeQuickView()
            window.dispatchEvent(new CustomEvent('open-cart'))
          } catch (e) {
            console.error('qv addToCart failed', e)
          }
        },
      }
    }
    function fcDecode(str) {
      const t = document.createElement('textarea')
      t.innerHTML = str
      return t.value
    }
  </script>
</div>
