<!-- Cart Sheet (Custom Builder) -->
<div
  x-data='cartSheetCustom()'
  x-show='isOpen'
  x-transition:enter='transition ease-out duration-300'
  x-transition:enter-start='translate-x-full'
  x-transition:enter-end='translate-x-0'
  x-transition:leave='transition ease-in duration-200'
  x-transition:leave-start='translate-x-0'
  x-transition:leave-end='translate-x-full'
  class='fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-xl z-50 flex flex-col'
  style='display: none;'
>
  <div class='flex items-center justify-between p-6 border-b border-gray-200'>
    <h2 class='text-lg font-semibold text-gray-900 uppercase tracking-wide'>
      Cart
    </h2>
    <button
      @click='closeCart'
      class='text-gray-400 hover:text-gray-600 transition-colors'
    >
      <svg
        class='w-6 h-6'
        fill='none'
        stroke='currentColor'
        viewBox='0 0 24 24'
      >
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'/>
      </svg>
    </button>
  </div>

  <div class='flex-1 overflow-y-auto p-6'>
    <div x-show='mergedItems.length === 0' class='text-center py-8'>
      <p class='text-gray-500'>Your cart is empty</p>
    </div>

    <div x-show='mergedItems.length > 0' class='space-y-4'>
      <template x-for='item in mergedItems' :key='item.key'>
        <div class='flex items-center space-x-4 p-4 border border-gray-200 rounded-lg'>
          <div class='flex-shrink-0 w-16 h-16 bg-gray-100 rounded-lg overflow-hidden'>
            <img
              :src='item.image'
              :alt='item.title'
              class='w-full h-full object-cover'
            >
          </div>
          <div class='flex-1 min-w-0'>
            <h3
              class='text-sm font-medium text-gray-900 truncate'
              x-text='item.title'
            ></h3>
            <p class='text-sm text-gray-500' x-text='item.variant'></p>
            <p
              class='text-sm font-medium text-gray-900'
              x-text='formatMoney(item.line_price)'
            ></p>
          </div>
          <div class='flex items-center space-x-2'>
            <button
              @click='updateQuantity(item.key, item.quantity - 1)'
              :disabled='item.quantity <= 1'
              class='w-8 h-8 flex items-center justify-center border border-gray-300 rounded-full hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed'
            >
              <svg
                class='w-4 h-4'
                fill='none'
                stroke='currentColor'
                viewBox='0 0 24 24'
              >
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M20 12H4'/>
              </svg>
            </button>
            <span
              class='w-8 text-center text-sm font-medium'
              x-text='item.quantity'
            ></span>
            <button
              @click='updateQuantity(item.key, item.quantity + 1)'
              class='w-8 h-8 flex items-center justify-center border border-gray-300 rounded-full hover:bg-gray-50'
            >
              <svg
                class='w-4 h-4'
                fill='none'
                stroke='currentColor'
                viewBox='0 0 24 24'
              >
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6v6m0 0v6m0-6h6m-6 0H6'/>
              </svg>
            </button>
          </div>
          <button
            @click='removeItem(item.key)'
            class='text-gray-400 hover:text-red-500 transition-colors'
          >
            <svg
              class='w-5 h-5'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16'/>
            </svg>
          </button>
        </div>
      </template>
    </div>
  </div>

  <div
    x-show='mergedItems.length > 0'
    class='border-t border-gray-200 p-6 space-y-4'
  >
    <div class='flex justify-between items-center'>
      <span class='text-sm font-medium text-gray-900 uppercase tracking-wide'
        >Subtotal (<span x-text='totalItems'></span>
        <span x-text="totalItems === 1 ? 'ITEM' : 'ITEMS'"></span>)</span
      >
      <span class='text-lg font-bold text-gray-900' x-text='subtotal'></span>
    </div>
    <button
      @click='checkout'
      class='w-full bg-black cursor-pointer hover:bg-gray-900 text-white font-bold py-4 px-6 transition-colors duration-200 uppercase tracking-wide'
    >
      Checkout â†’
    </button>
  </div>
</div>

<script>
  function cartSheetCustom() {
    return {
      isOpen: false,
      cartItems: [],
      mergedItems: [],
      isLoading: false,
      justOpened: false,

      init() {
        this.loadCart()
        window.addEventListener('cart-updated', () => this.loadCart())
        window.addEventListener('open-cart', () => this.openCart())
        document.addEventListener('click', e => {
          if (this.isOpen && !this.justOpened && !this.$el.contains(e.target))
            this.closeCart()
        })
      },
      openCart() {
        this.isOpen = true
        this.justOpened = true
        document.body.style.overflow = 'hidden'
        setTimeout(() => {
          this.justOpened = false
        }, 200)
      },
      closeCart() {
        this.isOpen = false
        document.body.style.overflow = ''
      },

      async loadCart() {
        try {
          const res = await fetch('/cart.js')
          const cart = await res.json()
          this.cartItems = cart.items.map(item => ({
            key: item.key,
            id: item.id,
            title: item.product_title,
            variant: item.variant_title,
            quantity: item.quantity,
            image: item.image,
            line_price: item.line_price,
            properties: item.properties || {},
          }))
          this.mergeFeeLines()
        } catch (e) {
          console.error('Error loading cart:', e)
        }
      },

      mergeFeeLines() {
        const feesByGroup = {}
        this.cartItems.forEach(it => {
          if (
            it.properties &&
            it.properties._customization_fee &&
            it.properties._build_group
          ) {
            const g = it.properties._build_group
            feesByGroup[g] = (feesByGroup[g] || 0) + (it.line_price || 0)
          }
        })
        const result = []
        this.cartItems.forEach(it => {
          const g = it.properties ? it.properties._build_group : null
          if (it.properties && it.properties._customization_fee) return
          const merged = { ...it }
          if (g && feesByGroup[g])
            merged.line_price = (merged.line_price || 0) + feesByGroup[g]
          result.push(merged)
        })
        this.mergedItems = result
      },

      async updateQuantity(key, qty) {
        if (qty < 1) return
        await fetch('/cart/change.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: key, quantity: qty }),
        })
        await this.loadCart()
        window.dispatchEvent(new CustomEvent('cart-updated'))
      },
      async removeItem(key) {
        await fetch('/cart/change.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: key, quantity: 0 }),
        })
        await this.loadCart()
        window.dispatchEvent(new CustomEvent('cart-updated'))
      },

      get totalItems() {
        return this.mergedItems.reduce((t, i) => t + i.quantity, 0)
      },
      get subtotal() {
        const total = this.mergedItems.reduce(
          (t, i) => t + i.line_price / 100,
          0
        )
        return this.formatMoney(total * 100)
      },
      formatMoney(c) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
        }).format(c / 100)
      },
      checkout() {
        window.location.href = '/checkout'
      },
    }
  }
</script>
