{% comment %}
  Product Card
  This snippet is used to display a product card on the product page.
  It is used to display the product image, title, price, and add to cart button.
  It is also used to display the product variants and their images.
  It is also used to display the product images and their images.
  It is also used to display the product images and their images.
{% endcomment %}

<div
  class='w-full py-6 px-3 hover:cursor-pointer'
  data-product='{{ product_product | json | escape }}'
  data-variants='{{ product_product.variants | json | escape }}'
  data-images='{{ product_product.images | json | escape }}'
  x-data='
    productCard(
      {{ product_product.selected_or_first_available_variant.id }},
      {{ product_product.title | json }},
      {% if product_product.featured_image %}
        {{ product_product.featured_image | image_url: width: 400 | json }}
      {% elsif product_product.images.size > 0 %}
        {{ product_product.images[0] | image_url: width: 400 | json }}
      {% else %}
        null
      {% endif %}
    )
  '
>
  <div class='bg-white overflow-hidden w-full {% assign product_type_lower = product_product.type | default: "" | downcase %}{% if product_type_lower contains "apparel" %}h-[440px]{% else %}h-[600px]{% endif %} flex flex-col transition-none'>
    <!-- Product Image -->
    <div class='relative h-96 bg-white overflow-hidden'>
      <!-- Status / SOLD OUT Badge -->
      {% assign kk_status = product_product.metafields.custom.product_status
        | default: product_product.metafields.custom_fields.product_status
        | default: product_product.metafields.global.product_status
      %}
      {% if kk_status != blank %}
        <div class='absolute top-4 left-4 bg-black text-white font-bold px-3 py-1 text-sm uppercase z-10'>
          {{ kk_status }}
        </div>
      {% else %}
        <div
          x-show='!isAvailable'
          class='absolute top-4 left-4 bg-black text-white font-bold px-3 py-1 text-sm uppercase z-10'
        >
          SOLD OUT
        </div>
      {% endif %}

      <!-- Product Image -->
      <a href='{{ product_product.url }}'>
        <img
          width='400'
          height='400'
          :src='currentImage'
          :alt="'{{ product_product.title }}'"
          class='absolute inset-0 w-full h-full object-contain'
        >
      </a>
    </div>

    <!-- Product Info -->
    <div class='p-6 flex flex-col flex-grow justify-between'>
      <div>
        <!-- Product Name -->
        <a href='{{ product_product.url }}'>
          <h2
            class='text-lg uppercase font-semibold text-gray-900 mb-2 text-center'
            x-text='baseTitle'
          >
            {{ product_product.title }}
          </h2>

          <!-- Price -->
          {% assign product_type_lower = product_product.type
            | default: ""
            | downcase
          %}
          {% unless product_type_lower contains "custom" %}
            <div class='text-2xl font-bold text-gray-900 mb-4 text-center'>
              {{ product_product.price | money }}
            </div>
          {% endunless %}
        </a>

        <!-- Handle Color Variants (hide for Apparels) -->
        {% assign product_type_lower = product_product.type
          | default: ""
          | downcase
        %}
        {% unless product_product.has_only_default_variant
          or product_type_lower contains "apparel"
          or product_type_lower contains "accessories"
        %}
          <div class='mb-4'>
            <div class='flex space-x-2 justify-center'>
              {% assign unique_handle_colors = "" %}
              {% for variant in product_product.variants %}
                {% if variant.option1 and variant.title != "Default Title" %}
                  {% unless unique_handle_colors contains variant.option1 %}
                    {% assign unique_handle_colors = unique_handle_colors
                      | append: variant.option1
                      | append: ","
                    %}
                    <button
                      @click='selectVariant({{ variant.id }})'
                      :class="selectedVariant === {{ variant.id }} ? 'ring-2 ring-black' : ''"
                      class='w-10 h-10 rounded-full border-2 border-gray-300 focus:outline-none focus:ring-2 focus:ring-black overflow-hidden'
                      title='{{ variant.option1 }}'
                    >
                      {% assign color_image = "" %}
                      {% assign option_lower = variant.option1 | downcase %}

                      {%- comment -%}
                        Priority for swatch image:
                        1) Variant featured_image
                        2) Uploaded override in section settings (by color name)
                        3) Fallback asset color chip or plain colored circle
                      {%- endcomment -%}

                      {% if variant.featured_image %}
                        <img
                          width='48'
                          height='48'
                          src='{{ variant.featured_image | image_url: width: 48 }}'
                          alt='{{ variant.option1 }}'
                          class='w-full h-full object-contain'
                        >
                      {% else %}
                        {%- comment -%} Settings-based overrides {%- endcomment -%}
                        {% if option_lower contains "black"
                          and option_lower contains "orange"
                        %}
                          {% if section.settings.black_orange_image %}
                            {% assign color_image = section.settings.black_orange_image
                              | image_url: width: 48
                            %}
                          {% else %}
                            {% assign color_image = "black_w_orange_liner.png" %}
                          {% endif %}
                        {% elsif option_lower contains "orange" %}
                          {% if section.settings.orange_image %}
                            {% assign color_image = section.settings.orange_image
                              | image_url: width: 48
                            %}
                          {% else %}
                            {% assign color_image = "orange.png" %}
                          {% endif %}
                        {% elsif option_lower contains "black" %}
                          {% if section.settings.black_image %}
                            {% assign color_image = section.settings.black_image
                              | image_url: width: 48
                            %}
                          {% else %}
                            {% assign color_image = "black_w_orange_liner.png" %}
                          {% endif %}
                        {% elsif option_lower contains "green" %}
                          {% if section.settings.green_image %}
                            {% assign color_image = section.settings.green_image
                              | image_url: width: 48
                            %}
                          {% else %}
                            {% assign color_image = "od_green.png" %}
                          {% endif %}
                        {% elsif option_lower contains "camo"
                          or option_lower contains "earth"
                        %}
                          {% if section.settings.camo_image %}
                            {% assign color_image = section.settings.camo_image
                              | image_url: width: 48
                            %}
                          {% else %}
                            {% assign color_image = "earth_camo.png" %}
                          {% endif %}
                        {% endif %}

                        {% if color_image != "" %}
                          {% if color_image contains "//" %}
                            <img
                              width='48'
                              height='48'
                              src='{{ color_image }}'
                              alt='{{ variant.option1 }}'
                              class='w-full h-full object-cover'
                            >
                          {% else %}
                            <img
                              width='48'
                              height='48'
                              src='{{ color_image | asset_url }}'
                              alt='{{ variant.option1 }}'
                              class='w-full h-full object-cover'
                            >
                          {% endif %}
                        {% else %}
                          <div
                            class='w-full h-full rounded-full'
                            style='background-color: {{ variant.option1 | downcase | replace: ' ', '' }}'
                          ></div>
                        {% endif %}
                      {% endif %}
                    </button>
                  {% endunless %}
                {% endif %}
              {% endfor %}
            </div>
          </div>
        {% endunless %}
      </div>

      {% assign product_type_lower = product_product.type
        | default: ""
        | downcase
      %}
      {% unless product_type_lower contains "apparel"
        or product_type_lower contains "custom"
        or product_type_lower contains "accessories"
      %}
        <!-- Add to Cart Button (only show when available and not apparels) -->
        <div x-show='isAvailable'>
          <button
            @click='addToCart'
            :disabled='isAddingToCart'
            class='w-full bg-black cursor-pointer hover:bg-gray-900 text-white font-semibold py-3 px-4 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed'
          >
            <span
              x-text="isAddingToCart ? 'Adding...' : '+ ADD TO CART'"
            ></span>
          </button>
        </div>
      {% endunless %}

      {% if product_type_lower contains "apparel"
        or product_type_lower contains "accessories"
      %}
        <!-- Quick View for Apparels -->
        <div class='mt-3'>
          <button
            type='button'
            @click='openQuickView()'
            class='w-full bg-black  text-white  uppercase font-semibold py-3 px-4 cursor-pointer hover:bg-gray-900 transition-colors duration-200'
          >
            Quick View
          </button>
        </div>
      {% endif %}
    </div>
  </div>

  <!-- Quick View Drawer (Apparels, teleported to body) -->
  <template x-if='isQuickViewOpen'>
    <div class='fixed inset-0 z-50' x-cloak>
      <div class='absolute inset-0 bg-black/50' @click='closeQuickView()'></div>
      <div
        x-ref='qvPanel'
        class='absolute right-0 top-0 h-full w-full max-w-lg bg-white shadow-xl flex flex-col transform transition-transform duration-300 translate-x-full'
        x-init='requestAnimationFrame(() => $el.classList.remove("translate-x-full"))'
      >
        <div class='flex items-center justify-between p-5 border-b border-gray-200'>
          {% comment %} <h3 class='text-xl font-semibold' x-text='baseTitle'></h3> {% endcomment %}
          <h3 class='text-lg font-semibold'>Select options</h3>
          <button
            @click='closeQuickView()'
            class='text-gray-500 hover:text-gray-700 text-2xl leading-none'
          >
            ×
          </button>
        </div>
        <div class='p-6 flex-1 overflow-y-auto'>
          <div class='flex items-start space-x-6'>
            <img
              :src='qvImage || currentImage'
              alt=''
              width='160'
              height='160'
              class='w-40 h-40 object-cover'
            >
            <div class='min-w-0'>
              <p
                class='text-gray-900 uppercase text-lg truncate'
                x-text='baseTitle'
              ></p>
              <p class='text-base mt-2'>{{ product_product.price | money }}</p>
            </div>
          </div>

          {% unless product_product.has_only_default_variant %}
            <template x-if='(optionNames && optionNames.length) || (variantsData && variantsData.length)'>
              <div>
                <!-- Option 1 -->
                <div class='mt-6' x-show='uniqueOptionValues(1).length'>
                  <p
                    class='text-xs font-semibold text-gray-700 mb-2 uppercase'
                    x-text='(optionNames[0] || "Option 1") + ":"'
                  ></p>
                  <div class='flex flex-wrap gap-3' x-show='isColorOption(1)'>
                    <template
                      x-for='val in uniqueOptionValues(1)'
                      :key='`c1-${val}`'
                    >
                      <button
                        @click='qvOption1 = val; updateQVSelectedVariant()'
                        :title='val'
                        :class="'w-12 h-12 rounded-md border overflow-hidden ' + (qvOption1 === val ? 'ring-2 ring-black' : '')"
                      >
                        <img
                          :src='imageForOptionValue(1,val)'
                          alt=''
                          width='48'
                          height='48'
                          class='w-full h-full object-contain'
                        >
                      </button>
                    </template>
                  </div>
                  <div class='flex flex-wrap gap-2' x-show='!isColorOption(1)'>
                    <template
                      x-for='val in uniqueOptionValues(1)'
                      :key='`t1-${val}`'
                    >
                      <button
                        @click='qvOption1 = val; updateQVSelectedVariant()'
                        :class="(qvOption1 === val ? 'ring-2 ring-black ' : '') + 'px-4 py-3 border rounded-md text-sm'"
                      >
                        <span x-text='val'></span>
                      </button>
                    </template>
                  </div>
                </div>

                <!-- Option 2 (if present) -->
                <div class='mt-6' x-show='uniqueOptionValues(2).length'>
                  <p
                    class='text-xs font-semibold text-gray-700 mb-2 uppercase'
                    x-text='(optionNames[1] || "Option 2") + ":"'
                  ></p>
                  <div class='flex flex-wrap gap-3' x-show='isColorOption(2)'>
                    <template
                      x-for='val in uniqueOptionValues(2)'
                      :key='`c2-${val}`'
                    >
                      <button
                        @click='qvOption2 = val; updateQVSelectedVariant()'
                        :disabled='!isComboAvailable(qvOption1, val)'
                        :title='val'
                        :class="'w-12 h-12 rounded-md border overflow-hidden ' + (qvOption2 === val ? 'ring-2 ring-black' : '') + (!isComboAvailable(qvOption1,val) ? ' opacity-40 cursor-not-allowed' : '')"
                      >
                        <img
                          :src='imageForOptionValue(2,val)'
                          alt=''
                          width='48'
                          height='48'
                          class='w-full h-full object-contain'
                        >
                      </button>
                    </template>
                  </div>
                  <div class='flex flex-wrap gap-2' x-show='!isColorOption(2)'>
                    <template
                      x-for='val in uniqueOptionValues(2)'
                      :key='`t2-${val}`'
                    >
                      <button
                        @click='qvOption2 = val; updateQVSelectedVariant()'
                        :disabled='!isComboAvailable(qvOption1, val)'
                        :class="((qvOption2 === val ? 'ring-2 ring-black ' : '') + 'px-4 py-3 border rounded-md text-sm ') + (!isComboAvailable(qvOption1, val) ? 'opacity-40 cursor-not-allowed' : '')"
                      >
                        <span x-text='val'></span>
                      </button>
                    </template>
                  </div>
                </div>
              </div>
            </template>
          {% endunless %}

          <div class='mt-8'>
            <p class='text-xs font-semibold text-gray-700 mb-2 uppercase'>
              Quantity
            </p>
            <div class='inline-flex items-center border'>
              <button
                class='w-10 h-10 text-lg'
                @click='qvQuantity = Math.max(1, (qvQuantity||1) - 1)'
              >
                −
              </button>
              <input
                type='number'
                min='1'
                x-model.number='qvQuantity'
                class='w-14 h-10 text-center outline-none border-none'
              >
              <button
                class='w-10 h-10 text-lg'
                @click='qvQuantity = (qvQuantity||1) + 1'
              >
                +
              </button>
            </div>
          </div>

          <!-- Primary action placed near options/quantity -->
          <div class='mt-6 space-y-3'>
            {% if kk_status != blank %}
              <button
                disabled
                class='w-full uppercase bg-gray-400 text-white font-bold py-4 text-base cursor-not-allowed'
              >
                {{ kk_status }}
              </button>
            {% else %}
              <button
                @click='qvAddToCart()'
                class='w-full cursor-pointer bg-black text-white font-bold py-4 text-base hover:bg-gray-900'
              >
                Add to Cart
              </button>
            {% endif %}
            <a
              href='{{ product_product.url }}'
              class='block text-center underline text-gray-700 hover:text-gray-900'
              >View details</a
            >
          </div>
        </div>
      </div>
    </div>
  </template>
</div>
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data(
      'productCard',
      (selectedVariantId, productTitle, currentImage) => ({
        selectedVariant: selectedVariantId,
        currentImage: currentImage,
        productData: {},
        variantsData: null,
        baseTitle: productTitle,
        isAddingToCart: false,
        isAvailable: true,
        // Quick View state
        isQuickViewOpen: false,
        qvSelectedVariantId: null,
        qvQuantity: 1,
        qvOption1: null,
        qvOption2: null,
        optionNames: [],
        qvImage: null,

        // Safely decode HTML-escaped JSON from data attributes
        decodeHtmlEntities(str) {
          const txt = document.createElement('textarea')
          txt.innerHTML = str
          return txt.value
        },

        // Heuristic: treat common size labels as size-like (not for title)
        isSizeValue(val) {
          if (!val) return false
          const v = String(val).toLowerCase().trim()
          const sizeValues = [
            'xxs',
            'xs',
            's',
            'm',
            'l',
            'xl',
            'xxl',
            '2xl',
            '3xl',
            '4xl',
            '5xl',
            'small',
            'medium',
            'large',
            'extra large',
          ]
          return sizeValues.includes(v)
        },

        init() {
          // Get product data from data attributes (HTML entities decoded first)
          const rawProduct = this.$el.getAttribute('data-product') || '{}'
          const rawVariants = this.$el.getAttribute('data-variants') || '[]'
          this.productData = JSON.parse(this.decodeHtmlEntities(rawProduct))
          this.variantsData = JSON.parse(this.decodeHtmlEntities(rawVariants))

          // Set initial title with first variant color
          this.updateTitle()

          // Check availability
          this.checkAvailability()

          // Ensure initial image reflects the initially selected variant if it has a featured image
          this.updateImage()
        },

        openQuickView() {
          this.qvSelectedVariantId = this.selectedVariant
          this.qvQuantity = 1
          // Capture option names from product
          try {
            const opts = Array.isArray(this.productData.options)
              ? this.productData.options
              : []
            this.optionNames = opts
              .map(o => (typeof o === 'string' ? o : (o && o.name) || ''))
              .filter(Boolean)
          } catch (e) {
            this.optionNames = []
          }
          // Seed option selections from current variant if available
          const current = (this.variantsData || []).find(
            v => v.id === (this.selectedVariant || this.qvSelectedVariantId)
          )
          if (current) {
            this.qvOption1 = current.option1 || null
            this.qvOption2 = current.option2 || null
          }
          // Initialize drawer image from current card image
          this.qvImage = this.currentImage
          this.updateQVSelectedVariant()
          this.isQuickViewOpen = true
          document.body.style.overflow = 'hidden'
        },
        closeQuickView() {
          const panel = this.$refs && this.$refs.qvPanel
          if (panel) {
            // Trigger slide-out
            panel.classList.add('translate-x-full')
            const done = () => {
              this.isQuickViewOpen = false
              document.body.style.overflow = ''
            }
            // Prefer transitionend, fallback to timeout
            const onEnd = e => {
              if (e && e.target !== panel) return
              panel.removeEventListener('transitionend', onEnd)
              done()
            }
            panel.addEventListener('transitionend', onEnd)
            setTimeout(() => {
              try {
                panel.removeEventListener('transitionend', onEnd)
              } catch (_) {}
              done()
            }, 320)
          } else {
            this.isQuickViewOpen = false
            document.body.style.overflow = ''
          }
        },

        selectVariant(variantId) {
          this.selectedVariant = variantId
          this.updateTitle()
          this.checkAvailability()
          this.updateImage()
        },

        checkAvailability() {
          if (this.variantsData && this.variantsData.length > 0) {
            const selectedVariant = this.variantsData.find(
              v => v.id === this.selectedVariant
            )
            this.isAvailable = selectedVariant
              ? selectedVariant.available
              : false
          } else {
            this.isAvailable = this.productData.available
          }
        },

        async addToCart() {
          if (!this.isAvailable || this.isAddingToCart) return

          this.isAddingToCart = true

          try {
            // Get the cart sheet component
            const cartSheet = document.querySelector('[x-data*="cartSheet"]')
            if (
              cartSheet &&
              cartSheet._x_dataStack &&
              cartSheet._x_dataStack[0]
            ) {
              await cartSheet._x_dataStack[0].addToCart(this.selectedVariant, 1)
            } else {
              // Fallback: direct API call using FormData
              const formData = new FormData()
              formData.append('id', this.selectedVariant)
              formData.append('quantity', '1')

              const response = await fetch('/cart/add.js', {
                method: 'POST',
                body: formData,
              })

              if (response.ok) {
                // Dispatch event to open cart
                window.dispatchEvent(new CustomEvent('open-cart'))
              } else {
                throw new Error('Failed to add to cart')
              }
            }
          } catch (error) {
            console.error('Error adding to cart:', error)
            alert('Failed to add item to cart. Please try again.')
          } finally {
            this.isAddingToCart = false
          }
        },

        async qvAddToCart() {
          try {
            // Prefer cart sheet addToCart if available
            const cartSheet = document.querySelector('[x-data*="cartSheet"]')
            if (
              cartSheet &&
              cartSheet._x_dataStack &&
              cartSheet._x_dataStack[0]
            ) {
              await cartSheet._x_dataStack[0].addToCart(
                this.qvSelectedVariantId || this.selectedVariant,
                this.qvQuantity
              )
            } else {
              const formData = new FormData()
              formData.append(
                'id',
                this.qvSelectedVariantId || this.selectedVariant
              )
              formData.append('quantity', String(this.qvQuantity || 1))
              await fetch('/cart/add.js', { method: 'POST', body: formData })
            }
            this.closeQuickView()
            // Open cart drawer
            window.dispatchEvent(new CustomEvent('open-cart'))
          } catch (e) {
            console.error('QuickView addToCart failed', e)
          }
        },

        // Build unique values for options
        uniqueOptionValues(index) {
          const key = index === 1 ? 'option1' : 'option2'
          const values = new Set()
          ;(this.variantsData || []).forEach(v => {
            const val = v[key]
            if (val) values.add(String(val))
          })
          return Array.from(values)
        },
        isColorOption(index) {
          try {
            const name = String(
              (this.optionNames && this.optionNames[index - 1]) || ''
            ).toLowerCase()
            return ['color', 'colour', 'shade', 'finish'].some(k =>
              name.includes(k)
            )
          } catch (e) {
            return false
          }
        },
        imageForOptionValue(index, val) {
          // Try to find a variant whose option matches and has an image
          const key = index === 1 ? 'option1' : 'option2'
          const variantWithImage = (this.variantsData || []).find(
            v =>
              String(v[key] || '') === String(val) &&
              v.featured_image &&
              v.featured_image.src
          )
          if (variantWithImage) return variantWithImage.featured_image.src
          // Fallback to current product image
          return this.qvImage || this.currentImage
        },
        isComboAvailable(val1, val2) {
          return !!(this.variantsData || []).find(v => {
            const ok1 = val1 ? String(v.option1 || '') === String(val1) : true
            const ok2 = val2 ? String(v.option2 || '') === String(val2) : true
            return ok1 && ok2
          })
        },
        updateQVSelectedVariant() {
          // Find variant matching current option selections
          let chosen = null
          if (this.qvOption1 || this.qvOption2) {
            chosen = (this.variantsData || []).find(v => {
              const ok1 = this.qvOption1
                ? String(v.option1 || '') === String(this.qvOption1)
                : true
              const ok2 = this.qvOption2
                ? String(v.option2 || '') === String(this.qvOption2)
                : true
              return ok1 && ok2
            })
          }
          if (chosen) {
            this.qvSelectedVariantId = chosen.id
            // Update image to variant image if present
            if (chosen.featured_image && chosen.featured_image.src) {
              this.qvImage = chosen.featured_image.src
            }
          } else {
            this.qvSelectedVariantId = this.selectedVariant
          }
        },

        updateImage() {
          // For apparel, keep using the product's featured_image (do not swap per variant)
          const typeLower = (this.productData.type || '').toLowerCase()
          if (typeLower.includes('apparel')) {
            return
          }
          // Update image when variant changes (for knives/non-apparels)
          if (this.variantsData && this.variantsData.length > 0) {
            const selectedVariant = this.variantsData.find(
              v => v.id === this.selectedVariant
            )

            // If variant has a featured image, use it
            if (selectedVariant && selectedVariant.featured_image) {
              this.currentImage = selectedVariant.featured_image.src
            } else {
              // No featured image, use the product's featured image
            }
          }
        },

        updateTitle() {
          const typeLower = (this.productData.type || '').toLowerCase()
          // For Apparels and Accessories, never append option to title
          const shouldAppend = !(
            typeLower.includes('apparel') || typeLower.includes('accessories')
          )

          if (this.variantsData && this.variantsData.length > 0) {
            // Filter out variants with "Default Title"
            const validVariants = this.variantsData.filter(
              variant => variant.title !== 'Default Title'
            )

            if (validVariants.length > 0) {
              const selectedVariant = validVariants.find(
                v => v.id === this.selectedVariant
              )
              const opt = selectedVariant ? selectedVariant.option1 : null

              if (shouldAppend && opt && !this.isSizeValue(opt)) {
                // Append non-size option (e.g., color) for non-apparel types
                this.baseTitle = `${this.productData.title} - ${String(opt).toUpperCase()}`
              } else {
                this.baseTitle = this.productData.title
              }
            } else {
              // No valid variants (all were "Default Title"), use original title
              this.baseTitle = this.productData.title
            }
          } else {
            // No variants, use original title
            this.baseTitle = this.productData.title
          }
        },
      })
    )
  })
</script>

<!--
  Removed duplicate Quick View template (handled above within component scope)
-->
